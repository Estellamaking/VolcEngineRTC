// Code generated by Kitex v1.4.3. DO NOT EDIT.

package vccontrol

import (
	"context"
	"github.com/volcengine/VolcEngineRTC/server/video_conf_control/kitex_gen/vc_control"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	HandleMeetingEvent(ctx context.Context, param *vc_control.TEventParam, callOptions ...callopt.Option) (r *vc_control.TEventResp, err error)
	HandleRecordCallback(ctx context.Context, param *vc_control.TRecordCallbackParam, callOptions ...callopt.Option) (r *vc_control.THTTPResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(psm string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(psm))

	config := byted.NewClientConfig()
	config.DestService = psm

	options = append(options, byted.ClientSuiteWithConfig(serviceInfo(), config))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kVCControlClient{
		kClient: newServiceClient(kc),
	}, nil
}

// NewClientWithBytedConfig creates a client for the service defined in IDL.
func NewClientWithBytedConfig(psm string, config *byted.ClientConfig, opts ...client.Option) (Client, error) {
	if config == nil {
		config = byted.NewClientConfig()
	}
	config.DestService = psm

	var options []client.Option
	options = append(options, client.WithDestService(psm))

	options = append(options, byted.ClientSuiteWithConfig(serviceInfo(), config))
	options = append(options, opts...)
	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kVCControlClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(psm string, opts ...client.Option) Client {
	kc, err := NewClient(psm, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

// MustNewClientWithBytedConfig creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClientWithBytedConfig(psm string, config *byted.ClientConfig, opts ...client.Option) Client {
	kc, err := NewClientWithBytedConfig(psm, config, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kVCControlClient struct {
	*kClient
}

func (p *kVCControlClient) HandleMeetingEvent(ctx context.Context, param *vc_control.TEventParam, callOptions ...callopt.Option) (r *vc_control.TEventResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.HandleMeetingEvent(ctx, param)
}

func (p *kVCControlClient) HandleRecordCallback(ctx context.Context, param *vc_control.TRecordCallbackParam, callOptions ...callopt.Option) (r *vc_control.THTTPResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.HandleRecordCallback(ctx, param)
}
